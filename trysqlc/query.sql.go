// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package trysqlc

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO "books" (
  title, genre
) VALUES (
  $1, $2
)
RETURNING id, title, genre
`

type CreateBookParams struct {
	Title string
	Genre sql.NullString
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.Genre)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Genre)
	return i, err
}

const deleteBookByID = `-- name: DeleteBookByID :exec
DELETE FROM "books"
WHERE id = $1
`

func (q *Queries) DeleteBookByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBookByID, id)
	return err
}

const findAllBooks = `-- name: FindAllBooks :many
SELECT id, title, genre FROM "books"
ORDER BY title ASC
`

func (q *Queries) FindAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, findAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.Genre); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findBookByID = `-- name: FindBookByID :one
SELECT id, title, genre FROM "books"
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindBookByID(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, findBookByID, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Genre)
	return i, err
}

const updateBookByID = `-- name: UpdateBookByID :one
UPDATE "books"
SET title = $2,
    genre = $3
WHERE id = $1
RETURNING id, title, genre
`

type UpdateBookByIDParams struct {
	ID    int64
	Title string
	Genre sql.NullString
}

func (q *Queries) UpdateBookByID(ctx context.Context, arg UpdateBookByIDParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBookByID, arg.ID, arg.Title, arg.Genre)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.Genre)
	return i, err
}
